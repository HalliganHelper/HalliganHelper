# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2016-04-04 00:49
from __future__ import unicode_literals
from collections import Counter
import logging
logger = logging.getLogger(__name__)

from django.db import migrations


def dedup_users(apps, schema_editor):
    CustomUser = apps.get_model("tas", "CustomUser")

    # Get list of all emails and convert them to lowercase
    emails = [
        e.lower()
        for e in
        CustomUser.objects.values_list('email', flat=True)
    ]

    # The next two lines determine which emails are in use by multiple accounts
    counter = Counter(emails)
    doubles = [
        CustomUser.objects.filter(email__iexact=item)
        for item, count
        in counter.items()
        if count > 1
    ]

    # Each `accounts` is a list of accounts associated with a single email
    # address
    for accounts in doubles:
        # The first account in the list will be our main account
        main_user = accounts[0]
        main_user.active = True
        is_admin = any([
            getattr(account, 'school', None) is not None
            for account
            in accounts
        ])

        # For all of the other accounts, get their information and merge it in
        # to the primary account. We only care about
        # - school administrators
        # - requests
        # - OfficeHours
        # As of the time this data fix is needed, TA Jobs are unique to the
        # case-insensitive email address so we don't need to migrate them.
        for account in accounts[1:]:
            # Note that the school administrative role is tied directly to the
            # user account, and not to its Student profile
            if is_admin:
                account.school.update(administrator=main_user)

            account.student.requests.update(requestor=main_user.student)
            account.student.officehour_set.update(ta=main_user.student)
            account.delete()


        # Convert the email to lowercase because that's the point
        main_user.email = main_user.email.lower()
        main_user.save()

        logger.info('Merging accounts for %s. num_accounts=%s',
                    main_user.email, len(accounts))


class Migration(migrations.Migration):

    dependencies = [
        ('tas', '0011_add_funny_student_blurbs'),
    ]

    operations = [
        migrations.RunPython(dedup_users, migrations.RunPython.noop)
    ]
